version: "3.9"

services:
  db:
    image: postgres:15
    container_name: drf_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: drfindex
      POSTGRES_USER: drfuser
      POSTGRES_PASSWORD: drfpass
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1",
        ]
      interval: 30s
      timeout: 5s
      retries: 6
      start_period: 30s

  api:
    build:
      context: ./api_backend
      dockerfile: Dockerfile
    container_name: drf_api
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgres://drfuser:drfpass@db:5432/drfindex
      DJANGO_SETTINGS_MODULE: app_blockchain.settings
      DJANGO_DEBUG: "0"
    command: >
      bash -lc "
      python manage.py migrate --noinput &&
      gunicorn app_blockchain.wsgi:application
        --bind 0.0.0.0:8000
        --workers 2
        --threads 4
        --timeout 60
        --access-logfile -
        --error-logfile -
      "
    ports:
      - "8000:8000"
    volumes:
      - ./api_backend:/app
    # replaced curl-based healthcheck with a Python-based check (no curl required)
    healthcheck:
      test: >
        bash -lc "python - <<'PY'
import sys, urllib.request, json
try:
    r = urllib.request.urlopen('http://127.0.0.1:8000/health', timeout=3)
    j = json.load(r)
    ok = j.get('ok') is True or j.get('status') == 'ok'
    sys.exit(0 if ok else 1)
except Exception:
    sys.exit(1)
PY"
      interval: 30s
      timeout: 5s
      retries: 6
      start_period: 30s

  # --- blockchain node images (shared build) ---
  node0:
    build:
      context: .
      dockerfile: Dockerfile_blch
    container_name: node0
    restart: unless-stopped
    env_file:
      - .env
    environment:
      ROLE: ROOT
      PYTHONPATH: /app
      SELF_BASE: http://node0:5000
      PEER: "" # bootstrap node: empty string (no initial peer)
      ROOT_HOST: node0
      ROOT_PORT: 5000
      FLASK_DEBUG: "1"
      WORKERS: "1"
      THREADS: "4"
      TIMEOUT: "120"
      PUBNUB_UUID: node0
      MINER_TOKEN: secret123
      CHAIN_DB_PATH: /data/leveldb
      # write chain snapshot into the leveldb mount (writable by appuser)
      CHAIN_STORE_PATH: /data/leveldb/chain_store.json
      GUNICORN_CMD_ARGS: "--log-level debug --capture-output --access-logfile - --error-logfile -"
      # disable internal pinging by default (your entrypoint exports this)
      DISABLE_INTERNAL_HEALTH_PINGS: "1"
    ports:
      - "5000:5000"
    healthcheck:
      # use Python-based check (no curl), and reduce frequency to avoid constant pings
      test: >
        bash -lc "python - <<'PY'
import sys, json, urllib.request
try:
    r = urllib.request.urlopen('http://127.0.0.1:5000/health', timeout=3)
    j = json.load(r)
    # consider node healthy if ready true or height >= 1
    if j.get('ready') is True or int(j.get('height') or 0) >= 1:
        sys.exit(0)
    sys.exit(1)
except Exception:
    sys.exit(1)
PY"
      interval: 30s
      timeout: 5s
      retries: 6
      start_period: 40s
    volumes:
      - ./data/node0/leveldb:/data/leveldb

  node1:
    build:
      context: .
      dockerfile: Dockerfile_blch
    container_name: node1
    restart: unless-stopped
    env_file:
      - .env
    environment:
      ROLE: VALIDATOR
      PYTHONPATH: /app
      SELF_BASE: http://node1:5000
      PEER: "node0:5000" # connect to bootstrap node (string)
      ROOT_HOST: node0
      ROOT_PORT: 5000
      FLASK_DEBUG: "1"
      WORKERS: "1"
      THREADS: "4"
      TIMEOUT: "120"
      PUBNUB_UUID: node1
      CHAIN_DB_PATH: /data/leveldb
      CHAIN_STORE_PATH: /data/leveldb/chain_store.json
      GUNICORN_CMD_ARGS: "--log-level debug --capture-output --access-logfile - --error-logfile -"
      DISABLE_INTERNAL_HEALTH_PINGS: "1"
    ports:
      - "5001:5000"
    depends_on:
      node0:
        condition: service_healthy
    healthcheck:
      test: >
        bash -lc "python - <<'PY'
import sys, json, urllib.request
try:
    r = urllib.request.urlopen('http://127.0.0.1:5000/health', timeout=3)
    j = json.load(r)
    if j.get('ready') is True or j.get('ok') is True:
        sys.exit(0)
    sys.exit(1)
except Exception:
    sys.exit(1)
PY"
      interval: 30s
      timeout: 5s
      retries: 6
      start_period: 40s
    volumes:
      - ./data/node1/leveldb:/data/leveldb

  node2:
    build:
      context: .
      dockerfile: Dockerfile_blch
    container_name: node2
    restart: unless-stopped
    env_file:
      - .env
    environment:
      ROLE: VALIDATOR
      PYTHONPATH: /app
      SELF_BASE: http://node2:5000
      PEER: "node0:5000"
      ROOT_HOST: node0
      ROOT_PORT: 5000
      FLASK_DEBUG: "1"
      WORKERS: "1"
      THREADS: "4"
      TIMEOUT: "120"
      PUBNUB_UUID: node2
      CHAIN_DB_PATH: /data/leveldb
      CHAIN_STORE_PATH: /data/leveldb/chain_store.json
      GUNICORN_CMD_ARGS: "--log-level debug --capture-output --access-logfile - --error-logfile -"
      DISABLE_INTERNAL_HEALTH_PINGS: "1"
    ports:
      - "5002:5000"
    depends_on:
      node0:
        condition: service_healthy
    healthcheck:
      test: >
        bash -lc "python - <<'PY'
import sys, json, urllib.request
try:
    r = urllib.request.urlopen('http://127.0.0.1:5000/health', timeout=3)
    j = json.load(r)
    if j.get('ready') is True or j.get('ok') is True:
        sys.exit(0)
    sys.exit(1)
except Exception:
    sys.exit(1)
PY"
      interval: 30s
      timeout: 5s
      retries: 6
      start_period: 40s
    volumes:
      - ./data/node2/leveldb:/data/leveldb

  node3:
    build:
      context: .
      dockerfile: Dockerfile_blch
    container_name: node3
    restart: unless-stopped
    env_file:
      - .env
    environment:
      ROLE: VALIDATOR
      PYTHONPATH: /app
      SELF_BASE: http://node3:5000
      PEER: "node0:5000"
      ROOT_HOST: node0
      ROOT_PORT: 5000
      FLASK_DEBUG: "0"
      WORKERS: "1"
      THREADS: "4"
      TIMEOUT: "120"
      PUBNUB_UUID: node3
      CHAIN_DB_PATH: /data/leveldb
      CHAIN_STORE_PATH: /data/leveldb/chain_store.json
      GUNICORN_CMD_ARGS: "--log-level debug --capture-output --access-logfile - --error-logfile -"
      DISABLE_INTERNAL_HEALTH_PINGS: "1"
    ports:
      - "5003:5000"
    depends_on:
      node0:
        condition: service_healthy
    healthcheck:
      test: >
        bash -lc "python - <<'PY'
import sys, json, urllib.request
try:
    r = urllib.request.urlopen('http://127.0.0.1:5000/health', timeout=3)
    j = json.load(r)
    if j.get('ready') is True or j.get('ok') is True:
        sys.exit(0)
    sys.exit(1)
except Exception:
    sys.exit(1)
PY"
      interval: 30s
      timeout: 5s
      retries: 6
      start_period: 40s
    volumes:
      - ./data/node3/leveldb:/data/leveldb

volumes:
  db_data:
